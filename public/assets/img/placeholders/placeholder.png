PNG
base64 -d <<'B64' > public/assets/img/placeholders/placeholder.png
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAK0lEQVR42mNgGAWjgP9nYGBg+M+ABYwMjIwkYGBg+A8GpgYEg2EwCkYjAABg6RQg9OgaJwAAAABJRU5ErkJggg==
B64
cat <<'SQL' > app/migrations/001_init.sql
CREATE TABLE users (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(120) NOT NULL,
    email VARCHAR(180) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    balance DECIMAL(10,2) NOT NULL DEFAULT 0,
    is_admin TINYINT(1) NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE categories (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(120) NOT NULL,
    slug VARCHAR(160) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE products (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    category_id INT UNSIGNED,
    name VARCHAR(180) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    status TINYINT(1) NOT NULL DEFAULT 1,
    sort_order INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE product_variants (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    name VARCHAR(120) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    sort_order INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE stock_codes (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    code TEXT NOT NULL,
    delivered_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE orders (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(60) NOT NULL,
    payment_method VARCHAR(60) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE coupons (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) NOT NULL UNIQUE,
    discount DECIMAL(5,2) NOT NULL,
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE settings (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    `key` VARCHAR(120) NOT NULL UNIQUE,
    `value` TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE posts (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(180) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    content LONGTEXT NOT NULL,
    status TINYINT(1) NOT NULL DEFAULT 1,
    published_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE tickets (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    subject VARCHAR(180) NOT NULL,
    message TEXT NOT NULL,
    status VARCHAR(60) NOT NULL DEFAULT 'open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL
cat <<'SQL' > app/migrations/002_examples.sql
INSERT INTO categories (name, slug, description) VALUES
('Oyun Kodları', 'oyun-kodlari', 'Popüler oyun kodları'),
('Yazılım Lisansları', 'yazilim-lisanslari', 'Profesyonel yazılım lisansları');

INSERT INTO products (category_id, name, slug, description, price, status) VALUES
(1, 'Valorant VP 125', 'valorant-vp-125', 'Riot Games Valorant VP kodu.', 59.90, 1),
(2, 'Windows 11 Pro Lisansı', 'windows-11-pro', 'Microsoft Windows 11 Pro OEM lisansı.', 349.00, 1);

INSERT INTO stock_codes (product_id, code) VALUES
(1, 'VP-AAA-BBB-CCC'),
(1, 'VP-DDD-EEE-FFF'),
(2, 'WIN11-XXXXX-YYYYY-ZZZZZ');

INSERT INTO posts (title, slug, content, status, published_at) VALUES
('E-Pin Nedir?', 'e-pin-nedir', 'E-Pin dijital bir üründür...', 1, NOW());
SQL
cat <<'SQL' > app/seeds/demo_data.sql
INSERT INTO users (name, email, password, balance, is_admin) VALUES
('Admin Kullanıcı', 'admin@example.com', '$2y$10$abcdefghijklmnopqrstuv', 0, 1),
('Müşteri', 'customer@example.com', '$2y$10$abcdefghijklmnopqrstuv', 25.50, 0);
SQL
cat <<'HTA' > public/.htaccess
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^ index.php [L]
</IfModule>
HTA
cat <<'PHP' > public/index.php
<?php
use App\Core\Router;
use App\Controllers\HomeController;
use App\Controllers\AuthController;
use App\Controllers\ProductController;
use App\Controllers\CartController;
use App\Controllers\CheckoutController;
use App\Controllers\OrderController;
use App\Controllers\UserController;
use App\Controllers\Admin\DashboardController;
use App\Controllers\Admin\OrdersController;

require __DIR__ . '/../vendor/autoload.php';

spl_autoload_register(function ($class) {
    $prefix = 'App\\';
    $baseDir = __DIR__ . '/../app/';
    if (str_starts_with($class, $prefix)) {
        $relative = str_replace('\\', '/', substr($class, strlen($prefix)));
        $file = $baseDir . $relative . '.php';
        if (file_exists($file)) {
            require $file;
        }
    }
});

require __DIR__ . '/../app/core/Helpers.php';

session_name(config('app.session_name'));
session_start();

date_default_timezone_set(config('app.timezone'));

$router = new Router();

$router->add('GET', '/', [new HomeController(), 'index']);
$router->add('GET', '/login', [new AuthController(), 'showLogin']);
$router->add('POST', '/login', [new AuthController(), 'login']);
$router->add('GET', '/register', [new AuthController(), 'showRegister']);
$router->add('POST', '/register', [new AuthController(), 'register']);
$router->add('GET', '/logout', [new AuthController(), 'logout']);
$router->add('GET', '/urun/([a-z0-9\-]+)', [new ProductController(), 'show']);
$router->add('GET', '/cart', [new CartController(), 'index']);
$router->add('POST', '/cart/add', [new CartController(), 'add']);
$router->add('GET', '/cart/remove/(\d+)', [new CartController(), 'remove']);
$router->add('GET', '/checkout', [new CheckoutController(), 'index']);
$router->add('POST', '/checkout', [new CheckoutController(), 'process']);
$router->add('GET', '/order/(\d+)', [new OrderController(), 'show']);
$router->add('GET', '/panel', [new UserController(), 'profile']);
$router->add('GET', '/panel/orders', [new UserController(), 'orders']);
$router->add('GET', '/panel/tickets', [new UserController(), 'tickets']);
$router->add('GET', '/admin', [new DashboardController(), 'index']);
$router->add('GET', '/admin/orders', [new OrdersController(), 'index']);

$router->dispatch($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']);
PHP
cat <<'PHP' > public/index.php
<?php
use App\Core\Router;
use App\Controllers\HomeController;
use App\Controllers\AuthController;
use App\Controllers\ProductController;
use App\Controllers\CartController;
use App\Controllers\CheckoutController;
use App\Controllers\OrderController;
use App\Controllers\UserController;
use App\Controllers\Admin\DashboardController;
use App\Controllers\Admin\OrdersController;

$autoload = __DIR__ . '/../vendor/autoload.php';
if (file_exists($autoload)) {
    require $autoload;
}

spl_autoload_register(function ($class) {
    $prefix = 'App\\';
    $baseDir = __DIR__ . '/../app/';
    if (str_starts_with($class, $prefix)) {
        $relative = str_replace('\\', '/', substr($class, strlen($prefix)));
        $file = $baseDir . $relative . '.php';
        if (file_exists($file)) {
            require $file;
        }
    }
});

require __DIR__ . '/../app/core/Helpers.php';

session_name(config('app.session_name'));
session_start();

date_default_timezone_set(config('app.timezone'));

$router = new Router();

$router->add('GET', '/', [new HomeController(), 'index']);
$router->add('GET', '/login', [new AuthController(), 'showLogin']);
$router->add('POST', '/login', [new AuthController(), 'login']);
$router->add('GET', '/register', [new AuthController(), 'showRegister']);
$router->add('POST', '/register', [new AuthController(), 'register']);
$router->add('GET', '/logout', [new AuthController(), 'logout']);
$router->add('GET', '/urun/([a-z0-9\-]+)', [new ProductController(), 'show']);
$router->add('GET', '/cart', [new CartController(), 'index']);
$router->add('POST', '/cart/add', [new CartController(), 'add']);
$router->add('GET', '/cart/remove/(\d+)', [new CartController(), 'remove']);
$router->add('GET', '/checkout', [new CheckoutController(), 'index']);
$router->add('POST', '/checkout', [new CheckoutController(), 'process']);
$router->add('GET', '/order/(\d+)', [new OrderController(), 'show']);
$router->add('GET', '/panel', [new UserController(), 'profile']);
$router->add('GET', '/panel/orders', [new UserController(), 'orders']);
$router->add('GET', '/panel/tickets', [new UserController(), 'tickets']);
$router->add('GET', '/admin', [new DashboardController(), 'index']);
$router->add('GET', '/admin/orders', [new OrdersController(), 'index']);

$router->dispatch($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']);
PHP
cat <<'PHP' > cron/order_auto_delivery.php
<?php
require __DIR__ . '/../public/index.php';

use App\Models\Order;
use App\Models\StockCode;
use App\Core\Mailer;

$orderModel = new Order();
$stockModel = new StockCode();
$mailer = new Mailer();

$orders = database()->query("SELECT * FROM orders WHERE status = 'paid'")->fetchAll();

foreach ($orders as $order) {
    $items = database()->query('SELECT * FROM order_items WHERE order_id = :order_id', ['order_id' => $order['id']])->fetchAll();
    foreach ($items as $item) {
        $code = $stockModel->pull((int) $item['product_id']);
        if ($code) {
            database()->prepare('UPDATE order_items SET delivered_code = :code WHERE id = :id')
                ->execute(['code' => $code['code'], 'id' => $item['id']]);
        }
    }

    database()->prepare("UPDATE orders SET status = 'completed' WHERE id = :id")
        ->execute(['id' => $order['id']]);

    if ($order['user_id']) {
        $user = database()->prepare('SELECT email FROM users WHERE id = :id');
        $user->execute(['id' => $order['user_id']]);
        $email = $user->fetchColumn();
        if ($email) {
            $mailer->send($email, 'Sipariş Teslim Edildi', 'store/payment_result', [
                'message' => 'Siparişiniz otomatik teslim edildi.',
            ]);
        }
    }
}
PHP
cat <<'PHP' > app/bootstrap.php
<?php
$autoload = __DIR__ . '/../vendor/autoload.php';
if (file_exists($autoload)) {
    require $autoload;
}

spl_autoload_register(function ($class) {
    $prefix = 'App\\';
    $baseDir = __DIR__ . '/';
    if (str_starts_with($class, $prefix)) {
        $relative = str_replace('\\', '/', substr($class, strlen($prefix)));
        $file = $baseDir . $relative . '.php';
        if (file_exists($file)) {
            require $file;
        }
    }
});

require_once __DIR__ . '/core/Helpers.php';

session_name(config('app.session_name'));
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

date_default_timezone_set(config('app.timezone'));
PHP
cat <<'PHP' > public/index.php
<?php
use App\Core\Router;
use App\Controllers\HomeController;
use App\Controllers\AuthController;
use App\Controllers\ProductController;
use App\Controllers\CartController;
use App\Controllers\CheckoutController;
use App\Controllers\OrderController;
use App\Controllers\UserController;
use App\Controllers\Admin\DashboardController;
use App\Controllers\Admin\OrdersController;

require __DIR__ . '/../app/bootstrap.php';

$router = new Router();

$router->add('GET', '/', [new HomeController(), 'index']);
$router->add('GET', '/login', [new AuthController(), 'showLogin']);
$router->add('POST', '/login', [new AuthController(), 'login']);
$router->add('GET', '/register', [new AuthController(), 'showRegister']);
$router->add('POST', '/register', [new AuthController(), 'register']);
$router->add('GET', '/logout', [new AuthController(), 'logout']);
$router->add('GET', '/urun/([a-z0-9\-]+)', [new ProductController(), 'show']);
$router->add('GET', '/cart', [new CartController(), 'index']);
$router->add('POST', '/cart/add', [new CartController(), 'add']);
$router->add('GET', '/cart/remove/(\d+)', [new CartController(), 'remove']);
$router->add('GET', '/checkout', [new CheckoutController(), 'index']);
$router->add('POST', '/checkout', [new CheckoutController(), 'process']);
$router->add('GET', '/order/(\d+)', [new OrderController(), 'show']);
$router->add('GET', '/panel', [new UserController(), 'profile']);
$router->add('GET', '/panel/orders', [new UserController(), 'orders']);
$router->add('GET', '/panel/tickets', [new UserController(), 'tickets']);
$router->add('GET', '/admin', [new DashboardController(), 'index']);
$router->add('GET', '/admin/orders', [new OrdersController(), 'index']);

$router->dispatch($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']);
PHP
cat <<'PHP' > cron/order_auto_delivery.php
<?php
require __DIR__ . '/../app/bootstrap.php';

use App\Models\Order;
use App\Models\StockCode;
use App\Core\Mailer;

$orderModel = new Order();
$stockModel = new StockCode();
$mailer = new Mailer();

$orders = database()->query("SELECT * FROM orders WHERE status = 'paid'")->fetchAll();

foreach ($orders as $order) {
    $itemsStmt = database()->prepare('SELECT * FROM order_items WHERE order_id = :order_id');
    $itemsStmt->execute(['order_id' => $order['id']]);
    $items = $itemsStmt->fetchAll();
    foreach ($items as $item) {
        $code = $stockModel->pull((int) $item['product_id']);
        if ($code) {
            database()->prepare('UPDATE order_items SET delivered_code = :code WHERE id = :id')
                ->execute(['code' => $code['code'], 'id' => $item['id']]);
        }
    }

    database()->prepare("UPDATE orders SET status = 'completed' WHERE id = :id")
        ->execute(['id' => $order['id']]);

    if ($order['user_id']) {
        $userStmt = database()->prepare('SELECT email FROM users WHERE id = :id');
        $userStmt->execute(['id' => $order['user_id']]);
        $email = $userStmt->fetchColumn();
        if ($email) {
            $mailer->send($email, 'Sipariş Teslim Edildi', 'store/payment_result', [
                'message' => 'Siparişiniz otomatik teslim edildi.',
            ]);
        }
    }
}
PHP
cat <<'PHP' > cron/stock_low_alert.php
<?php
require __DIR__ . '/../app/bootstrap.php';

use App\Models\Product;
use App\Models\StockCode;
use App\Core\Mailer;

$productModel = new Product();
$stockModel = new StockCode();
$mailer = new Mailer();

$products = $productModel->allActive();

foreach ($products as $product) {
    $remaining = $stockModel->remainingCount((int) $product['id']);
    if ($remaining <= 3) {
        $mailer->send(config('mail.from.address'), 'Düşük Stok Uyarısı', 'store/payment_result', [
            'message' => $product['name'] . ' ürünü için stok ' . $remaining . ' adet kaldı.',
        ]);
    }
}
PHP
cat <<'JSON' > lang/tr.json
{
    "welcome": "Hoş geldiniz",
    "cart": "Sepet",
    "checkout": "Ödeme"
}
JSON
cat <<'MD' > README.md
# E-Pin Market

Modüler ve framework kullanmayan E-PİN / Lisans / Dijital hesap satış uygulaması. Apache + PHP 8 + MySQL ortamlarında cPanel uyumlu şekilde çalışır.

## Özellikler
- Ürünler için otomatik kod havuzu teslimatı
- Sepet, ödeme ve sipariş yönetimi
- Basit dosya önbelleği ve lazy-load destekli vitrin
- PayTR, Iyzico ve Mock ödeme sürücüleri
- Yönetici paneli ve kullanıcı paneli aynı kod tabanında
- CSRF, XSS koruması, parola hashing ve giriş rate-limit

## Kurulum
1. Projeyi sunucunuza kopyalayın ve `public/` dizinini web kök dizini olarak ayarlayın.
2. `app/config/database.php` dosyasını veritabanı bilgilerinizle güncelleyin.
3. `app/migrations/*.sql` dosyalarını MySQL sunucunuza uygulayın.
4. SMTP ayarlarınızı `app/config/mail.php` üzerinden yapılandırın.
5. Gerekirse `app/config/payment.php` içerisindeki ödeme bilgilerini düzenleyin.

## Cron İşleri
- `cron/order_auto_delivery.php`: Ödenmiş siparişler için kod havuzundan otomatik teslimat yapar.
- `cron/stock_low_alert.php`: Stok kritik seviyeye düştüğünde e-posta ile bilgilendirir.

## Geliştirme
- Ek dil desteği için `lang/` klasörüne yeni JSON dosyası ekleyin.
- Yeni kontrolör veya model eklerken `app/controllers` ve `app/models` yapısını takip edin.
MD
cat <<'SQL' > app/migrations/001_init.sql
CREATE TABLE users (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(120) NOT NULL,
    email VARCHAR(180) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    balance DECIMAL(10,2) NOT NULL DEFAULT 0,
    is_admin TINYINT(1) NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE categories (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(120) NOT NULL,
    slug VARCHAR(160) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE products (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    category_id INT UNSIGNED,
    name VARCHAR(180) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    status TINYINT(1) NOT NULL DEFAULT 1,
    sort_order INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE product_variants (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    name VARCHAR(120) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    sort_order INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE stock_codes (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    code TEXT NOT NULL,
    delivered_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE orders (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(60) NOT NULL,
    payment_method VARCHAR(60) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE order_items (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    order_id INT UNSIGNED NOT NULL,
    product_id INT UNSIGNED NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    price DECIMAL(10,2) NOT NULL,
    delivered_code TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE coupons (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) NOT NULL UNIQUE,
    discount DECIMAL(5,2) NOT NULL,
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE settings (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    `key` VARCHAR(120) NOT NULL UNIQUE,
    `value` TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE posts (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(180) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    content LONGTEXT NOT NULL,
    status TINYINT(1) NOT NULL DEFAULT 1,
    published_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE tickets (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    subject VARCHAR(180) NOT NULL,
    message TEXT NOT NULL,
    status VARCHAR(60) NOT NULL DEFAULT 'open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL
cat <<'PHP' > app/controllers/CheckoutController.php
<?php
namespace App\Controllers;

use App\Core\Auth;
use App\Core\Controller;
use App\Core\CSRF;
use App\Core\Validator;
use App\Models\Order;
use App\Models\StockCode;
use App\Services\PaymentGateway;

class CheckoutController extends Controller
{
    public function index()
    {
        $cart = $_SESSION['cart'] ?? [];
        if (empty($cart)) {
            session_flash('error', 'Sepetiniz boş.');
            return $this->redirect('/cart');
        }

        return $this->view('store/checkout', ['cart' => $cart]);
    }

    public function process()
    {
        if (!CSRF::verify($_POST['_token'] ?? '')) {
            session_flash('error', 'Oturum doğrulanamadı.');
            return $this->redirect('/checkout');
        }

        $cart = $_SESSION['cart'] ?? [];
        if (empty($cart)) {
            session_flash('error', 'Sepetiniz boş.');
            return $this->redirect('/cart');
        }

        $errors = Validator::make($_POST, [
            'payment_method' => 'required',
            'email' => 'required|email',
        ]);

        if ($errors) {
            session_flash('error', 'Ödeme formunu kontrol ediniz.');
            return $this->redirect('/checkout');
        }

        $total = array_reduce($cart, fn ($sum, $item) => $sum + ($item['product']['price'] * $item['quantity']), 0);

        $gateway = new PaymentGateway();
        $result = $gateway->charge($_POST['payment_method'], [
            'amount' => $total,
            'email' => $_POST['email'],
            'description' => 'E-Pin Satışı',
        ]);

        if (!$result['success']) {
            session_flash('error', $result['message'] ?? 'Ödeme başarısız.');
            return $this->redirect('/checkout');
        }

        $orderModel = new Order();
        $orderId = $orderModel->create([
            'user_id' => Auth::user()['id'] ?? null,
            'total_amount' => $total,
            'status' => 'paid',
            'payment_method' => $_POST['payment_method'],
        ]);

        $stockModel = new StockCode();
        foreach ($cart as $item) {
            database()->prepare('INSERT INTO order_items (order_id, product_id, quantity, price, created_at, updated_at) VALUES (:order_id, :product_id, :quantity, :price, NOW(), NOW())')
                ->execute([
                    'order_id' => $orderId,
                    'product_id' => $item['product']['id'],
                    'quantity' => $item['quantity'],
                    'price' => $item['product']['price'],
                ]);

            if (!empty($item['product']['auto_delivery'])) {
                for ($i = 0; $i < $item['quantity']; $i++) {
                    $code = $stockModel->pull((int) $item['product']['id']);
                    if ($code) {
                        database()->prepare('UPDATE order_items SET delivered_code = :code WHERE order_id = :order_id AND product_id = :product_id AND delivered_code IS NULL LIMIT 1')
                            ->execute([
                                'code' => $code['code'],
                                'order_id' => $orderId,
                                'product_id' => $item['product']['id'],
                            ]);
                    }
                }
            }
        }

        $_SESSION['cart'] = [];
        session_flash('success', 'Siparişiniz oluşturuldu.');

        return $this->redirect('/order/' . $orderId);
    }
}
PHP
cat <<'SQL' > app/migrations/001_init.sql
CREATE TABLE users (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(120) NOT NULL,
    email VARCHAR(180) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    balance DECIMAL(10,2) NOT NULL DEFAULT 0,
    is_admin TINYINT(1) NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE categories (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(120) NOT NULL,
    slug VARCHAR(160) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE products (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    category_id INT UNSIGNED,
    name VARCHAR(180) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    auto_delivery TINYINT(1) NOT NULL DEFAULT 1,
    status TINYINT(1) NOT NULL DEFAULT 1,
    sort_order INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE product_variants (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    name VARCHAR(120) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    sort_order INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE stock_codes (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    code TEXT NOT NULL,
    delivered_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE orders (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(60) NOT NULL,
    payment_method VARCHAR(60) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE order_items (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    order_id INT UNSIGNED NOT NULL,
    product_id INT UNSIGNED NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    price DECIMAL(10,2) NOT NULL,
    delivered_code TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE coupons (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) NOT NULL UNIQUE,
    discount DECIMAL(5,2) NOT NULL,
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE settings (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    `key` VARCHAR(120) NOT NULL UNIQUE,
    `value` TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE posts (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(180) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    content LONGTEXT NOT NULL,
    status TINYINT(1) NOT NULL DEFAULT 1,
    published_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE tickets (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    subject VARCHAR(180) NOT NULL,
    message TEXT NOT NULL,
    status VARCHAR(60) NOT NULL DEFAULT 'open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL
cat <<'SQL' > app/migrations/002_examples.sql
INSERT INTO categories (name, slug, description) VALUES
('Oyun Kodları', 'oyun-kodlari', 'Popüler oyun kodları'),
('Yazılım Lisansları', 'yazilim-lisanslari', 'Profesyonel yazılım lisansları');

INSERT INTO products (category_id, name, slug, description, price, auto_delivery, status) VALUES
(1, 'Valorant VP 125', 'valorant-vp-125', 'Riot Games Valorant VP kodu.', 59.90, 1, 1),
(2, 'Windows 11 Pro Lisansı', 'windows-11-pro', 'Microsoft Windows 11 Pro OEM lisansı.', 349.00, 0, 1);

INSERT INTO stock_codes (product_id, code) VALUES
(1, 'VP-AAA-BBB-CCC'),
(1, 'VP-DDD-EEE-FFF'),
(2, 'WIN11-XXXXX-YYYYY-ZZZZZ');

INSERT INTO posts (title, slug, content, status, published_at) VALUES
('E-Pin Nedir?', 'e-pin-nedir', 'E-Pin dijital bir üründür...', 1, NOW());
SQL
cat <<'PHP' > app/controllers/BlogController.php
<?php
namespace App\Controllers;

use App\Core\Controller;
use App\Models\Blog;

class BlogController extends Controller
{
    public function index()
    {
        $blogModel = new Blog();
        return $this->view('store/blog', ['posts' => $blogModel->allPublished()]);
    }

    public function show(string $slug)
    {
        $blogModel = new Blog();
        $post = $blogModel->findBySlug($slug);
        if (!$post) {
            http_response_code(404);
            return $this->view('errors/404');
        }

        return $this->view('store/post', ['post' => $post]);
    }
}
PHP
cat <<'PHP' > public/index.php
<?php
use App\Core\Router;
use App\Controllers\HomeController;
use App\Controllers\AuthController;
use App\Controllers\ProductController;
use App\Controllers\CartController;
use App\Controllers\CheckoutController;
use App\Controllers\OrderController;
use App\Controllers\UserController;
use App\Controllers\BlogController;
use App\Controllers\Admin\DashboardController;
use App\Controllers\Admin\OrdersController;

require __DIR__ . '/../app/bootstrap.php';

$router = new Router();

$router->add('GET', '/', [new HomeController(), 'index']);
$router->add('GET', '/login', [new AuthController(), 'showLogin']);
$router->add('POST', '/login', [new AuthController(), 'login']);
$router->add('GET', '/register', [new AuthController(), 'showRegister']);
$router->add('POST', '/register', [new AuthController(), 'register']);
$router->add('GET', '/logout', [new AuthController(), 'logout']);
$router->add('GET', '/urun/([a-z0-9\-]+)', [new ProductController(), 'show']);
$router->add('GET', '/cart', [new CartController(), 'index']);
$router->add('POST', '/cart/add', [new CartController(), 'add']);
$router->add('GET', '/cart/remove/(\d+)', [new CartController(), 'remove']);
$router->add('GET', '/checkout', [new CheckoutController(), 'index']);
$router->add('POST', '/checkout', [new CheckoutController(), 'process']);
$router->add('GET', '/order/(\d+)', [new OrderController(), 'show']);
$router->add('GET', '/panel', [new UserController(), 'profile']);
$router->add('GET', '/panel/orders', [new UserController(), 'orders']);
$router->add('GET', '/panel/tickets', [new UserController(), 'tickets']);
$router->add('GET', '/blog', [new BlogController(), 'index']);
$router->add('GET', '/blog/([a-z0-9\-]+)', [new BlogController(), 'show']);
$router->add('GET', '/admin', [new DashboardController(), 'index']);
$router->add('GET', '/admin/orders', [new OrdersController(), 'index']);

$router->dispatch($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']);
PHP
git status -sb
git status
ls -a
